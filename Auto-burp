import requests
import json
import time

# Burp Suite API details
BURP_API_URL = 'http://127.0.0.1:1337'  # Adjust IP/Port as per your setup
API_KEY = 'Uvai1mLAqbl32f0ZJOOhKE3LWCdl984G'  # Set if using API authentication
HEADERS = {'Content-Type': 'application/json'}

# List of IPs or URLs to scan
target_ips = ['216.163.242.240', '216.163.242.244']  # Replace with your IPs/URLs


# Function to start a scan for the IP
def start_scan(ip):
    scan_url = f'{BURP_API_URL}/v0.1/scan'
    payload = {
        "urls": [f'http://{ip}'],  # Specify the IP/URL as the target
        "application_logins": [],  # Set any login details if needed
        "excluded_urls": [],  # Optionally exclude specific URLs
        "user_agent": "Mozilla/5.0"  # Set user-agent if required
    }

    if API_KEY:
        headers = {**HEADERS, 'Authorization': f'Bearer {API_KEY}'}
    else:
        headers = HEADERS

    # Send the request to start the scan
    response = requests.post(scan_url, headers=headers, data=json.dumps(payload))

    if response.status_code == 200:
        scan_id = response.json()['scan_id']
        print(f'Started scan for {ip}, scan ID: {scan_id}')
        return scan_id
    else:
        print(f'Failed to start scan for {ip}, Status code: {response.status_code}, Response: {response.text}')
        return None


# Function to check the scan status
def check_scan_status(scan_id):
    scan_url = f'{BURP_API_URL}/v0.1/scan/{scan_id}'

    if API_KEY:
        headers = {**HEADERS, 'Authorization': f'Bearer {API_KEY}'}
    else:
        headers = HEADERS

    # Request scan status
    response = requests.get(scan_url, headers=headers)

    if response.status_code == 200:
        scan_status = response.json()['status']
        return scan_status
    else:
        print(f'Failed to check scan status for scan ID {scan_id}, Status code: {response.status_code}')
        return None


# Main function to automate scanning of multiple IPs
def scan_multiple_ips():
    for ip in target_ips:
        scan_id = start_scan(ip)

        if scan_id:
            print(f'Scanning {ip}, waiting for completion...')

            # Loop until scan completes
            while True:
                status = check_scan_status(scan_id)

                if status == 'completed':
                    print(f'Scan completed for {ip}')
                    break
                else:
                    print(f'Scan still in progress for {ip}, status: {status}')
                    time.sleep(10)  # Wait before checking again


if __name__ == '__main__':
    scan_multiple_ips()
